
entity Region {
	regionName String
}

entity Country {
	countryName String
}

// an ignored comment
/** not an ignored comment */
entity Location {
	streetAddress String
	postalCode String
	city String
	stateProvince String
}

entity Department {
	departmentName String required
}

/**
 * Task entity.
 * @author The JHipster team.
 */
entity Task {
	title String
	description String
}
/** Entreprise */

entity Enterprise {
    /** fieldName */

    companyName String required
    businessRegisterNumber String required
    uniqueIdentificationNumber String required
    businessDomicile String
    businessEmail String required pattern(/^[^@\s]+@[^@\s]+\.[^@\s]+$/)
    businessPhone String required
    country Pays
    city String
    manager String
    businessLogo Blob minbytes(3) maxbytes(1000)
    mapLocator ImageBlob minbytes(3) maxbytes(1000)
}
/**
 * The Employee entity.
 */
entity Employee {
	/**
	* The firstname attribute.
	*/
	firstName String
	lastName String
	email String required pattern(/^[^@\s]+@[^@\s]+\.[^@\s]+$/)
	phoneNumber String
    identityCard String required
    dateInspiration String
    nationality Pays
    uploadIdentityCard Blob minbytes(3) maxbytes(1000)
    companyName String
    typeEmployed TypeEmployed
     cityAgency String
     firstName String
     lastName String
     residenceCity String
     email String required
     phoneNumber String required
     address String
     socialSecurityNumber String
     birthDate Instant
     birthPlace String
     entryDate Instant
     releaseDate Instant
     workstation String
     descriptionWorkstation String
     level Level
     coefficient Long
     employedManager String
     numberHours String
     averageHourlyCost String
     monthlyGrossAmount Long
     commissionAmount Long
     contractType ContractType
     salaryType SalaryType
     hireDate Instant
	
    
	
    
}

entity Job {
	jobTitle String
	minSalary Long
	maxSalary Long
}

entity JobHistory {
	startDate Instant
	endDate Instant
	language Language
}

enum Language {
    FRENCH, ENGLISH, SPANISH
}
enum Pays {
    CAMEROON , SENEGAL, COTE_IVOIRE, MALI
}
enum TypeEmployed {
    MARKETER, SALARY, CONSULTANT
}
enum Level {
    A, B, C, D, E
}
  enum ContractType {
    CDD, CDI,INTERN, APPRENTICE, COMMERCIAL_AGENT, EXTERNAL
}
enum SalaryType {
    EXECUTIVE_SALARIED, ASSOCIATE, NON_EXECUTIVE_SALARIED
}
relationship OneToOne {
	Country{region} to Region
}

relationship OneToOne {
	Location{country} to Country
}

relationship OneToOne {
	Department{location} to Location
}
relationship OneToOne {
	Employee{enterprise(compagnyName)} to Enterprise
}
relationship ManyToMany {
	Job{task(title)} to Task{job}
}

// defining multiple OneToMany relationships with comments
relationship OneToMany {
	Employee to Job{employee}
	/**
	* A relationship
	*/
	Department to
	/**
	* Another side of the same relationship
	*/
	Employee{department}
}

relationship ManyToOne {
	Employee{manager(email)} to Employee
}

// defining multiple oneToOne relationships
relationship OneToOne {
	JobHistory{job} to Job
	JobHistory{department} to Department
	JobHistory{employee} to Employee
}

// Set pagination options
paginate JobHistory, Employee with infinite-scroll
paginate Job with pagination

// Use Data Transfer Objects (DTO)
// dto * with mapstruct

// Set service options to all except few
service all with serviceImpl except Employee, Job

// Set an angular suffix
// angularSuffix * with mySuffix
